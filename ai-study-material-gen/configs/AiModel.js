const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

  export const courseOutlineAIModel= model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate study material for Python for an exam. The level of difficulty should be EASY with  summary of the course, a list of chapters along with  summary for each chapter, Topic list in each chapter all in JSON format.\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"course_title\": \"Introduction to Python Programming (Easy Level)\",\n  \"course_summary\": \"This course provides a gentle introduction to the Python programming language. It focuses on fundamental concepts, syntax, and basic programming techniques suitable for beginners. You will learn to write simple Python programs, work with data, and understand the core principles of programming.\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Getting Started with Python\",\n      \"chapter_summary\": \"This chapter introduces the basics of Python, including how to install and set it up. You'll learn about different ways to run Python code and write your first 'Hello, World!' program.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why use Python?\",\n        \"Installing Python\",\n        \"Running Python code (Interactive shell and scripts)\",\n        \"Your first program: 'Hello, World!'\",\n        \"Comments in Python\"\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Variables and Data Types\",\n      \"chapter_summary\": \"This chapter covers how to store and manipulate data using variables. You'll learn about different types of data, such as numbers, text (strings), and true/false values (booleans).\",\n      \"topics\": [\n        \"What are variables?\",\n        \"Variable naming rules\",\n        \"Basic data types: Integers (int), Floating-point numbers (float), Strings (str), Booleans (bool)\",\n        \"Assigning values to variables\",\n        \"Type checking (using type())\",\n        \"Simple arithmetic operations\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Input and Output\",\n       \"chapter_summary\": \"Learn how to get input from the user and display output to the console. This chapter covers basic input/output functions.\",\n      \"topics\": [\n        \"The input() function (reading user input)\",\n        \"The print() function (displaying output)\",\n        \"Using f-strings for formatted output\",\n        \"Concatenating strings and variables\"\n\n      ]\n    },\n      {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Working with Strings\",\n      \"chapter_summary\": \"This chapter focuses on manipulating text data using string methods. Learn how to perform common string operations.\",\n       \"topics\": [\n        \"String indexing (accessing characters by position)\",\n         \"String slicing (extracting substrings)\",\n        \"Common string methods: len(), lower(), upper(), find(), replace()\",\n        \"String immutability\"\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Conditional Statements\",\n       \"chapter_summary\": \"Learn how to make decisions in your code using if, elif, and else statements. This allows you to execute different blocks of code based on conditions.\",\n      \"topics\": [\n        \"The 'if' statement\",\n        \"The 'if-else' statement\",\n        \"The 'if-elif-else' statement\",\n        \"Comparison operators (==, !=, >, <, >=, <=)\",\n        \"Logical operators (and, or, not)\",\n        \"Simple decision making programs\"\n      ]\n    },\n     {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Introduction to Loops\",\n       \"chapter_summary\": \"Learn how to repeat actions using 'for' and 'while' loops. This chapter covers basic looping structures and how to use them.\",\n      \"topics\": [\n       \"The 'for' loop (iterating over sequences)\",\n       \"The 'while' loop (repeating code based on a condition)\",\n       \"Loop control: 'break' and 'continue' statements\",\n       \"Basic loop examples\"\n      ]\n    }\n  ]\n}\n```\n"},
        ],
      },
    ],
  });
  // export const generateNotesAIModel = model.startChat({
  //   generationConfig,
  //   history: [
  //     {
  //       role: "user",
  //       parts: [
  //         {text: "Generate exam material detail content for each chapter, Make sure to include all topic point in the content, make sure to give content in HTML format(Do not add HTMLKL, Head, Body, Title Tag) The chapters:\"chapter_number\": 1,\n      \"chapter_title\": \"Advanced Data Structures & Algorithmic Techniques\",\n      \"chapter_summary\": \"This chapter covers advanced data structures and algorithms with a strong emphasis on their practical implications and efficiency. Expect rigorous analysis and complex implementations.\",\n      \"topics\": [\n        \"Advanced Tree Structures (AVL Trees, Red-Black Trees, B-Trees)\",\n        \"Advanced Graph Algorithms (Dijkstra's, Bellman-Ford, Floyd-Warshall, Minimum Spanning Trees)\",\n        \"Heaps and Priority Queues (Advanced implementations and use cases)\",\n        \"Tries (Prefix trees, Applications in search and autocompletion)\",\n        \"Disjoint Set Data Structures (Union-Find)\",\n        \"Advanced Dynamic Programming Techniques (Bitmasking, State Compression)\",\n        \"Greedy Algorithms (Proofs of correctness and edge cases)\",\n        \"Amortized Analysis and its applications\",\n        \"Time and space complexity optimization strategies\"\n      ]\n    },"},
  //       ],
  //     },
  //     {
  //       role: "model",
  //       parts: [
  //         {text: "```html\n    <h2>Chapter 1: Advanced Data Structures & Algorithmic Techniques</h2>\n    <p><strong>Chapter Summary:</strong> This chapter covers advanced data structures and algorithms with a strong emphasis on their practical implications and efficiency. Expect rigorous analysis and complex implementations.</p>\n\n    <h3>Topics and Exam Material Details:</h3>\n\n    <h4>1. Advanced Tree Structures</h4>\n    <ul>\n        <li><strong>AVL Trees:</strong>\n            <ul>\n                <li>Understand the concept of self-balancing trees.</li>\n                <li>Know the properties that define an AVL tree (balance factor).</li>\n                <li>Be able to perform insertion and deletion operations in an AVL tree, including rotations (single and double).</li>\n                <li>Analyze the time complexity of AVL tree operations.</li>\n                <li>Understand the advantages and disadvantages of AVL trees.</li>\n            </ul>\n        </li>\n        <li><strong>Red-Black Trees:</strong>\n            <ul>\n                <li>Understand the concept of self-balancing trees and their properties.</li>\n                 <li>Know the five properties that define a Red-Black tree</li>\n                <li>Be able to perform insertion and deletion operations in a Red-Black tree, including recoloring and rotations.</li>\n                <li>Analyze the time complexity of Red-Black tree operations.</li>\n                 <li>Understand the advantages and disadvantages of Red-Black trees</li>\n                 <li>Compare red-black trees with AVL trees</li>\n            </ul>\n        </li>\n         <li><strong>B-Trees:</strong>\n            <ul>\n                <li>Understand the structure and properties of B-Trees.</li>\n                 <li>Understand the concept of order of a B-Tree</li>\n                <li>Be able to perform insertion and deletion operations in a B-Tree.</li>\n                <li>Understand B-Tree variants (B+ Trees).</li>\n                <li>Analyze the time complexity of B-Tree operations.</li>\n                <li>Know the applications of B-Trees in databases and file systems.</li>\n            </ul>\n        </li>\n    </ul>\n\n    <h4>2. Advanced Graph Algorithms</h4>\n    <ul>\n        <li><strong>Dijkstra's Algorithm:</strong>\n            <ul>\n                <li>Understand the purpose and workings of Dijkstra's algorithm for finding the shortest paths in a weighted graph.</li>\n                <li>Be able to implement Dijkstra's algorithm using priority queues.</li>\n                 <li>Analyze the time complexity of Dijkstra's algorithm</li>\n                 <li>Know the limitations of Dijkstra's algorithm (non-negative edge weights).</li>\n                 <li>Be able to Apply Dijkstra algorithm to find shortest distance between two nodes or source to all other nodes.</li>\n            </ul>\n        </li>\n        <li><strong>Bellman-Ford Algorithm:</strong>\n            <ul>\n                 <li>Understand the purpose and workings of Bellman-Ford's algorithm for finding the shortest paths in a weighted graph.</li>\n                <li>Know how to detect negative cycles using the Bellman-Ford algorithm.</li>\n                 <li>Analyze the time complexity of Bellman-Ford's algorithm.</li>\n                <li>Understand the advantages of Bellman-Ford over Dijkstra's (handling negative edge weights).</li>\n                <li>Be able to Apply Bellman Ford algorithm to find shortest distance between two nodes or source to all other nodes.</li>\n            </ul>\n        </li>\n         <li><strong>Floyd-Warshall Algorithm:</strong>\n            <ul>\n                <li>Understand the purpose and workings of Floyd-Warshall's algorithm for finding all-pairs shortest paths in a weighted graph.</li>\n                 <li>Analyze the time complexity of Floyd-Warshall algorithm.</li>\n                <li>Understand the applications of Floyd-Warshall's algorithm (transitive closure).</li>\n                <li>Be able to Apply Floyd-Warshall algorithm to find shortest distance between any pair of nodes.</li>\n            </ul>\n        </li>\n        <li><strong>Minimum Spanning Trees:</strong>\n             <ul>\n                <li>Understand the concept of a minimum spanning tree (MST).</li>\n                 <li>Know and be able to implement Prim's and Kruskal's algorithms.</li>\n                 <li>Analyze the time complexity of Prim's and Kruskal's algorithms.</li>\n                 <li>Understand the applications of MSTs.</li>\n            </ul>\n        </li>\n    </ul>\n\n    <h4>3. Heaps and Priority Queues</h4>\n    <ul>\n        <li><strong>Advanced Implementations:</strong>\n             <ul>\n                  <li>Understand different heap implementations (binary heaps, d-ary heaps, Fibonacci heaps).</li>\n                  <li>Be able to analyze the time complexity of heap operations (insert, delete, extract-min/max).</li>\n            </ul>\n        </li>\n        <li><strong>Use Cases:</strong>\n             <ul>\n                 <li>Understand the use of priority queues in various algorithms (Dijkstra's, Huffman coding).</li>\n                 <li>Understand implementation of priority queues using heaps.</li>\n                 <li>Be able to apply priority queues to solve practical problems.</li>\n             </ul>\n        </li>\n    </ul>\n\n\n     <h4>4. Tries</h4>\n    <ul>\n         <li><strong>Prefix Trees:</strong>\n            <ul>\n                <li>Understand the structure and purpose of tries.</li>\n                <li>Be able to implement insertion, search, and deletion operations in a Trie.</li>\n                <li>Analyze the time complexity and space complexity of Trie operations.</li>\n                 <li>Understand advantages and disadvantages of using a trie.</li>\n             </ul>\n        </li>\n        <li><strong>Applications:</strong>\n              <ul>\n                  <li>Know the applications of tries in search (auto-completion, spell checking).</li>\n                <li>Understand the use cases of tries in routing and IP lookups.</li>\n              </ul>\n        </li>\n    </ul>\n\n    <h4>5. Disjoint Set Data Structures</h4>\n    <ul>\n         <li><strong>Union-Find:</strong>\n              <ul>\n                  <li>Understand the purpose and usage of disjoint set data structures.</li>\n                <li>Be able to implement Union-by-rank and Path Compression techniques.</li>\n                <li>Analyze the time complexity of Union and Find operations with optimizations.</li>\n                <li>Understand the applications of disjoint set data structures (e.g., Kruskal's algorithm).</li>\n              </ul>\n         </li>\n    </ul>\n\n    <h4>6. Advanced Dynamic Programming Techniques</h4>\n    <ul>\n          <li><strong>Bitmasking:</strong>\n              <ul>\n                   <li>Understand how bitmasking can be used in dynamic programming.</li>\n                   <li>Be able to apply bitmasking to solve optimization problems (e.g., TSP).</li>\n              </ul>\n         </li>\n         <li><strong>State Compression:</strong>\n              <ul>\n                <li>Understand state compression techniques in dynamic programming.</li>\n                <li>Be able to identify when and how to use state compression to optimize memory.</li>\n                <li>Know various methods for state compression</li>\n              </ul>\n          </li>\n    </ul>\n\n    <h4>7. Greedy Algorithms</h4>\n    <ul>\n        <li><strong>Proofs of Correctness:</strong>\n             <ul>\n                <li>Understand how to formally prove the correctness of a greedy algorithm.</li>\n            </ul>\n        </li>\n        <li><strong>Edge Cases:</strong>\n             <ul>\n                 <li>Be able to identify and handle edge cases for greedy algorithms.</li>\n                 <li>Understand limitations and potential pitfalls of greedy approaches.</li>\n                 <li>Know when a greedy approach can yield an optimal result</li>\n            </ul>\n         </li>\n    </ul>\n\n    <h4>8. Amortized Analysis</h4>\n    <ul>\n        <li><strong>Concepts:</strong>\n            <ul>\n               <li>Understand the concept of amortized analysis.</li>\n                <li>Be able to apply aggregate, accounting, and potential methods of amortized analysis</li>\n            </ul>\n        </li>\n         <li><strong>Applications:</strong>\n             <ul>\n                 <li>Know the applications of amortized analysis to data structure operations (dynamic arrays, etc.).</li>\n                  <li>Be able to analyze the amortized time complexity of algorithms.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4>9. Time and Space Complexity Optimization Strategies</h4>\n    <ul>\n         <li><strong>Strategies:</strong>\n              <ul>\n                  <li>Be able to identify bottlenecks in algorithms.</li>\n                <li>Understand various code optimization strategies (e.g., memory caching, precomputation).</li>\n                  <li>Understand how to optimize loops and recursion.</li>\n                   <li>Be able to choose appropriate data structures for optimal performance.</li>\n              </ul>\n          </li>\n    </ul>\n```\n"},
  //       ],
  //     },
  //   ],
  // });
  // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // console.log(result.response.text());
